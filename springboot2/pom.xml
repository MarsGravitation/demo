<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>2.1.10.RELEASE</version>
    <relativePath/> <!-- lookup parent from repository -->
  </parent>

  <groupId>com.microwu.cxd</groupId>
  <artifactId>springboot-2</artifactId>
  <packaging>pom</packaging>
  <version>1.0-SNAPSHOT</version>
  <modules>
    <module>strategy-pattern</module>
    <module>multithread</module>
    <module>spring-netty</module>
      <module>spring-security</module>
  </modules>

  <name>springboot-2</name>
  <!-- FIXME change it to the project's website -->
  <url>http://www.example.com</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.8</maven.compiler.source>
    <maven.compiler.target>1.8</maven.compiler.target>
  </properties>

  <profiles>
    <profile>
      <id>dev</id><!--执行打包命令时将使用此处的id进行定位-->
      <properties>
        <env>dev</env><!--此处为对应的环境放置配置文件的目录，上一步创建的为dev,这里设置为dev。下面两个目录配置参照此处-->
      </properties>
      <activation>
        <activeByDefault>true</activeByDefault><!--此处将dev设置为默认环境-->
      </activation>
    </profile>
    <profile>
      <id>test</id>
      <properties>
        <env>test</env>
      </properties>
    </profile>
    <profile>
      <id>prod</id>
      <properties>
        <env>prod</env>
      </properties>
    </profile>
  </profiles>

  <build>
    <!-- 使用指定的filter进行过滤，在执行mvn命令的时候带上-Ppro就代表生产环境，就会加载生产环境的properties，-Pdev就代表开发环境（默认） -->
    <filters>
      <filter>src/main/resources/env</filter>
    </filters>

    <!-- 资源文件位置src/main/resources/,这下面的资源文件的${}会全部被替换成filter中的标签内容。
             directory指定的value会作为classes的资源跟目录，
             比如指定:src/main/resources/，则classes下会出现jdbc等包，
             若指定:src/main/resources/jdbc/，则classes下直接出现jdbc包下的文件，不会额外出现jdbc等其他包结构。因为他把jdbc作为了根目录
     -->
    <resources>
      <resource><!--此处的设置是打包的时候排除不相关的目录-->
        <directory>src/main/resources/env</directory><!--此处设置为上面在resources目录下创建的文件夹-->
        <excludes>
          <exclude>dev/*</exclude>
          <exclude>test/*</exclude>
          <exclude>prod/*</exclude>
        </excludes>
        <filtering>true</filtering><!--开启过滤器，此处不能忽略！-->
      </resource>
      <resource><!--此处的设置是为了将放置于resources文件夹下mybatis的mapper文件正常打包进去，和一些不需要多环境的配置文件-->
        <directory>src/main/resources</directory><!--如果将mybatis的mapper文件放在dao接口的同目录下，应该将此处设置为src/main/java-->
        <includes>
          <include>**/email.properties</include>
          <include>**/*.xml</include>
        </includes>
        <filtering>false</filtering><!--此处不需要过滤器过滤-->
      </resource>
      <resource><!--此处设置是配置相应配置文件夹的路径-->
        <directory>src/main/resources/env/${env}</directory>
      </resource>
    </resources>


    <plugins>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
      </plugin>
    </plugins>
  </build>


</project>
