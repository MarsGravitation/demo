<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xsi:schemaLocation="http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://code.alibabatech.com/schema/dubbo        http://code.alibabatech.com/schema/dubbo/dubbo.xsd">

    <!--
        1. 启动时检查
        Dubbo 缺省会在启动时检查依赖的服务是否可用，不可用时会抛出异常，组织Spring 初始化完成，以便上线时，能及早发现问题
        服务端：dubbo:registry check="false"  客户端：dubbo:reference check="false"

        2. 集群容错
        failover：失败自动切换，重试其它服务器。通常用于读操作
        failfast：快速失败，只发起一次调用，失败立即报错。通常用于非幂等性操作
        failsafe：失败安全，出现异常时，直接忽略
        failback：失败自动恢复，后台记录失败请求，定时重发。通常用于消息通知操作
        forking：并行调用多个服务器，只要一个成功即返回。通常用于实时性要求比较高的读操作
        broadcast：广播调用所有提供者，逐个调用，任意一台报错则报错

        3. 负载均衡
        random：随机
        roundRobbi：轮训，按公约后的权重设置轮训比率
        leastActive：最少活跃调用数
        consistentHash：一致性Hash，相同参数的请求总是发到统一提供者

        4. 直连提供者 - 主要用于开发环境

        5. 只订阅 - 只能够订阅服务端的服务，而不能够注册
        6. 只注册

        7. 其他特性先不做了解吧
    -->
    <!--当前项目在整个分布式架构里面的唯一名称，计算依赖关系的标签-->
    <dubbo:application name="provider" owner="chengxudong">
        <dubbo:parameter key="qos.enable" value="true"/>
        <dubbo:parameter key="qos.accept.foreign.ip" value="false"/>
        <dubbo:parameter key="qos.port" value="55555"/>
    </dubbo:application>

    <dubbo:monitor protocol="registry"/>

    <!--dubbo这个服务所要暴露的服务地址所对应的注册中心-->
    <!--<dubbo:registry address="N/A"/>-->
    <dubbo:registry address="zookeeper://192.168.133.134:2181" check="false"/>

    <!--当前服务发布所依赖的协议；webserovice、Thrift、Hessain、http-->
    <dubbo:protocol name="dubbo" port="20880"/>

    <!--服务发布的配置，需要暴露的服务接口-->
    <dubbo:service
            interface="com.microwu.cxd.dubbo.provider.service.ProviderService"
            ref="providerService"/>

    <!--Bean bean定义-->
    <bean id="providerService" class="com.microwu.cxd.dubbo.provider.service.impl.ProviderServiceImpl"/>

</beans>