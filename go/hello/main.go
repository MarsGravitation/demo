/*
下载安装

配置 GoPath

GoPath 是告诉操作系统我们写的 go 项目的存放路径
	bin: 存放可执行的文件
	src: 存放源文件
	pkg: 存放编译的中间状态包


1. 第一行代码 package main 定义了包名。你必须在源文件中非注释的第一行指明这个文件属于哪个包，入：package main。package main 表示一个可独立执行的程序，每个 Go 应用程序都包含一个名为 main 的包

2. 下一行 import fmt 告诉 Go 编译器这个程序需要使用 fmt 包，fmt 包实现了格式化 IO - 输入输出函数

3. func main 是程序开始执行的函数。main 函数是每一个可执行程序所必须包含的，一般来说都是在启动后第一个被执行的函数（如果有 init 函数则会先执行该函数）

4. 注释

5. fmt.Println 可以将字符串输出到控制台，并在最后自动增加换行符 \n
使用 fmt.Println("hello, world\n") 可以得到相同的结果

Print 和 Println 这两个函数也支持使用变量，入：fmt.Println(arr)。如果没有特别的指定，它们会以默认的打印格式将变量 arr 输出到控制台。

6. 当标识符（包括常量、变量、类型、函数名、结构字段等等）以一个大写字母开头，如：Group1，那么使用这种形式的标识符的对应就可以被外部包的代码所使用（客户端程序需要先导入这个包），这被称为导出（向面向对象语言中的 public）；标识符如果以小写字母开头，则对包外是不可见的，但是他们在整个包的内部是可见并可用的（向面向对象语言中的 protected）。

需要注意的是 { 不能单独放在一行
*/
package main

import "fmt"

func main() {
	fmt.Println("Hi! I want to be a Gopher!")
}

/*
2. Go 语言基础语法

行分隔符
在 Go 程序中，一行代表一个语句的结束。每个语句不需要像 C 以分号结尾，以为这些工作都将由 Go 编译器自动完成。

注释

标识符
标识符用来命名变量、类型等结构实体。一个标识符有字母、数字、下划线组成，但是第一个字符必须是字母或下划线而不能是数字。

字符串连接
Go 语言的字符串可以通过 + 实现

格式化字符串

fmt.Sprintf 格式化字符串并赋值给新串
%d 表示整形数字，%s 表示字符串
*/

/*
Go 语言数据类型

布尔型
var b bool = true

数字类型
整型 int 和浮点型 float32、float64

字符串类型
字符串就是一串固定长度的字符连接起来的字符序列。

派生类型

*/